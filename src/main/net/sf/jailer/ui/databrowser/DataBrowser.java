/*
 * Copyright 2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.jailer.ui.databrowser;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Properties;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

import net.sf.jailer.CommandLineParser;
import net.sf.jailer.Jailer;
import net.sf.jailer.database.Session;
import net.sf.jailer.datamodel.DataModel;
import net.sf.jailer.datamodel.Table;
import net.sf.jailer.ui.About;
import net.sf.jailer.ui.BrowserLauncher;
import net.sf.jailer.ui.DbConnectionDialog;
import net.sf.jailer.ui.UIUtil;
import net.sf.jailer.ui.DbConnectionDialog.ConnectionInfo;

import org.apache.log4j.PropertyConfigurator;

/**
 * Data Browser Frame.
 * 
 * @author Ralf Wisser
 */
@SuppressWarnings("serial")
public class DataBrowser extends javax.swing.JFrame {

	/**
	 * The desktop.
	 */
	private Desktop desktop;

	/**
	 * Icon for the frame.
	 */
	private ImageIcon jailerIcon = null;

	/**
	 * The {@link DataModel}.
	 */
	private final Reference<DataModel> datamodel;

	/**
	 * Session.
	 */
	private Session session;
	
	/**
	 * Constructor.
	 * 
	 * @param datamodel
	 *            the {@link DataModel}
	 * @param root
	 *            table to start browsing with
	 * @param condition initial condition
	 * @param connection
	 *            DB-connection
	 */
	public DataBrowser(DataModel datamodel, Table root, String condition, ConnectionInfo connection) throws Exception {
		this.datamodel = new Reference<DataModel>(datamodel);
		initComponents();
		
		try {
	        for (final LookAndFeelInfo lfInfo: UIManager.getInstalledLookAndFeels()) {
	        	JMenuItem mItem = new JMenuItem();
	        	mItem.setText(lfInfo.getName());
	        	view.add(mItem);
	        	mItem.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						setPLAF(lfInfo.getClassName());
					}
	        	});
	        }
        } catch (Throwable t) {
        }
        
		updateTitel(connection);

		try {
			setIconImage((jailerIcon = new ImageIcon(getClass().getResource("/net/sf/jailer/resource/jailer.png"))).getImage());
		} catch (Throwable t) {
			try {
				setIconImage((jailerIcon = new ImageIcon(getClass().getResource("/net/sf/jailer/resource/jailer.gif"))).getImage());
			} catch (Throwable t2) {
			}
		}

		jailerIcon.setImage(jailerIcon.getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));

		if (connection != null) {
			session = new Session(connection.driverClass, connection.url, connection.user, connection.password);
		}
		desktop = new Desktop(this.datamodel, jailerIcon, session, this);
		
		jScrollPane1.setViewportView(desktop);
		addWindowListener(new WindowListener() {
			@Override
			public void windowOpened(WindowEvent e) {
			}

			@Override
			public void windowIconified(WindowEvent e) {
			}

			@Override
			public void windowDeiconified(WindowEvent e) {
			}

			@Override
			public void windowDeactivated(WindowEvent e) {
			}

			@Override
			public void windowClosing(WindowEvent e) {
				desktop.stop();
			}

			@Override
			public void windowClosed(WindowEvent e) {
				desktop.stop();
			}

			@Override
			public void windowActivated(WindowEvent e) {
			}
		});
		setLocation(100, 100);
		setSize(900, 600);
		if (root != null) {
			desktop.addTableBrowser(null, 0, root, null, condition);
		}
	}

	protected void setConnection(ConnectionInfo connection) throws Exception {
		if (connection != null) {
			session = new Session(connection.driverClass, connection.url, connection.user, connection.password);
			desktop.session = session;
			updateTitel(connection);
		}
	}

	private void updateTitel(ConnectionInfo connection) {
		setTitle((connection != null? (connection.user + "@" + connection.url + " - ") : "") + "Jailer " + Jailer.VERSION + " Data Browser");
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuTools = new javax.swing.JMenu();
        analyseMenuItem = new javax.swing.JMenuItem();
        dataModelEditorjMenuItem = new javax.swing.JMenuItem();
        menuWindow = new javax.swing.JMenu();
        view = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        helpForum = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setAutoscrolls(true);

        jInternalFrame1.setVisible(true);

        jLabel1.setText("jLabel1");
        jInternalFrame1.getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        jScrollPane1.setViewportView(jInternalFrame1);

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        menuTools.setText("Tools");

        analyseMenuItem.setText("Analyse Database");
        analyseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseMenuItemActionPerformed(evt);
            }
        });
        menuTools.add(analyseMenuItem);

        dataModelEditorjMenuItem.setText("Data Model Editor");
        dataModelEditorjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataModelEditorjMenuItemActionPerformed(evt);
            }
        });
        menuTools.add(dataModelEditorjMenuItem);

        jMenuBar1.add(menuTools);

        menuWindow.setText("Window");

        view.setLabel("Look&Feel");
        menuWindow.add(view);

        jMenuBar1.add(menuWindow);

        jMenu2.setText("Help");

        helpForum.setLabel("Help Forum");
        helpForum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpForumActionPerformed(evt);
            }
        });
        jMenu2.add(helpForum);

        jMenuItem4.setText("About Jailer");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpForumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpForumActionPerformed
        try {
            BrowserLauncher.openURL(new URI("https://sourceforge.net/forum/?group_id=197260"));
        } catch (Exception e) {
            UIUtil.showException(this, "Error", e);
        }
}//GEN-LAST:event_helpForumActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        About about = new About(this, true);
        about.setTitle("Jailer " + Jailer.VERSION);
        about.pack();
        about.setLocation(getLocation().x + (getSize().width - about.getPreferredSize().width) / 2, getLocation().y + (getSize().height - about.getPreferredSize().height) / 2);
        about.setVisible(true);
}//GEN-LAST:event_jMenuItem4ActionPerformed

    private void analyseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analyseMenuItemActionPerformed

    private void dataModelEditorjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataModelEditorjMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataModelEditorjMenuItemActionPerformed
    
    /**
	 * File in which plaf-setting is stored.
	 */
	private static final String PLAFSETTING = ".plaf2.ui";

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(final String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DataModel datamodel;
				try {
					CommandLineParser.parse(args, true);
					datamodel = new DataModel();
					try {
	    	    		File plafSetting = new File(PLAFSETTING);
	    	    		String plaf;
	    	    		if (!plafSetting.exists()) {
	    	    			plaf = "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel";
	    	    		} else {
		    	    		BufferedReader in = new BufferedReader(new FileReader(plafSetting));
		    	    		plaf = in.readLine();
		    	    		in.close();
	    	    		}
	    	    		UIManager.setLookAndFeel(plaf);
	    	    	} catch (Exception x) {
	    	    	}
	    	    	DataBrowser dataBrowser = new DataBrowser(datamodel, null, "", null);
					dataBrowser.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					dataBrowser.setVisible(true);
					DbConnectionDialog dbConnectionDialog = new DbConnectionDialog(dataBrowser);
					if (dbConnectionDialog.connect("Jailer Data Browser")) {
						dataBrowser.setConnection(dbConnectionDialog.currentConnection);
					} else {
						System.exit(0);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem analyseMenuItem;
    private javax.swing.JMenuItem dataModelEditorjMenuItem;
    private javax.swing.JMenuItem helpForum;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenu menuWindow;
    private javax.swing.JMenu view;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets Look&Feel.
     * 
     * @param plaf the l&f
     */
    private void setPLAF(String plaf) {
	    try {
	    	UIManager.setLookAndFeel(plaf);
	    	SwingUtilities.updateComponentTreeUI(this);
	    	try {
                File file = new File(PLAFSETTING);
                file.delete();
            } catch (Exception e) {
            }
            try {
	    		File plafSetting = new File(PLAFSETTING);
	    		PrintWriter out = new PrintWriter(plafSetting);
	    		out.println(plaf);
	    		out.close();
	    	} catch (Exception x) {
	    	}
	    }
    	catch (Exception e) {
	    	UIUtil.showException(this, "Error", e);
	    }
    }
    
    // initialize log4j
	static {
		InputStream in = Jailer.class.getResourceAsStream("/net/sf/jailer/resource/log4j.properties");
		Properties p = new Properties();
		try {
			p.load(in);
		} catch (IOException e) {
			e.printStackTrace();
		}
		PropertyConfigurator.configure(p);
	}
}
