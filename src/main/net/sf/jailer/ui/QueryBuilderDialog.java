/*
 * Copyright 2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.jailer.ui;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import sdoc.SyntaxSupport;

import net.sf.jailer.datamodel.Association;
import net.sf.jailer.datamodel.Column;
import net.sf.jailer.datamodel.DataModel;
import net.sf.jailer.datamodel.Table;
import net.sf.jailer.util.SqlUtil;

/**
 * Query Builder Dialog.
 *
 * @author Ralf Wisser
 */
public class QueryBuilderDialog extends javax.swing.JDialog {
    
    /** Creates new form QueryBuilderDialog */
    public QueryBuilderDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        SyntaxSupport instance = SyntaxSupport.getInstance();
        instance.highlightCurrent(false);
		instance.addSupport(SyntaxSupport.SQL_LEXER, sqlTextArea);
		setLocation(100, 150);
		pack();
		setSize(Math.max(600, getWidth()), 500);
		UIUtil.initPeer();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        relationshipsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        singleLineCB = new javax.swing.JCheckBox();
        qualifyNamesCB = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        joinAWithBButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        clipboardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Query Builder");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        relationshipsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Relationships", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12), new java.awt.Color(86, 82, 125)));
        relationshipsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        getContentPane().add(relationshipsPanel, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "SQL Query", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12), new java.awt.Color(86, 82, 125)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        sqlTextArea.setColumns(20);
        sqlTextArea.setRows(5);
        jScrollPane1.setViewportView(sqlTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        singleLineCB.setText("single line  ");
        singleLineCB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                singleLineCBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel3.add(singleLineCB, gridBagConstraints);

        qualifyNamesCB.setText("qualify table names");
        qualifyNamesCB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qualifyNamesCBStateChanged(evt);
            }
        });
        qualifyNamesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qualifyNamesCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(qualifyNamesCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        joinAWithBButton.setText(" Join selected Tables");
        joinAWithBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinAWithBButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        jPanel2.add(joinAWithBButton, gridBagConstraints);

        saveButton.setText(" Save ");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(saveButton, gridBagConstraints);

        clipboardButton.setText(" Copy to Clipboard ");
        clipboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clipboardButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        jPanel2.add(clipboardButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String fn = UIUtil.choseFile(null, ".", "Save SQL Query", "", this, false, false);
        if (fn != null) {
        	try {
        		PrintWriter out = new PrintWriter(new FileWriter(fn));
        		out.print(sqlTextArea.getText());
        		out.close();
        	} catch (Exception e) {
        		UIUtil.showException(this, "Error saving query", e);
			}
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clipboardButtonActionPerformed
        sqlTextArea.selectAll();
        sqlTextArea.copy();
        sqlTextArea.select(0, 0);
    }//GEN-LAST:event_clipboardButtonActionPerformed

    private void singleLineCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_singleLineCBStateChanged
        updateSQL();
}//GEN-LAST:event_singleLineCBStateChanged

    private void qualifyNamesCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qualifyNamesCBStateChanged
        checkAliases();
    	updateSQL();
}//GEN-LAST:event_qualifyNamesCBStateChanged

    private void qualifyNamesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qualifyNamesCBActionPerformed
        checkAliases();
        updateSQL();
    }//GEN-LAST:event_qualifyNamesCBActionPerformed

    private void joinAWithBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinAWithBButtonActionPerformed
        createPathQuery();
    }//GEN-LAST:event_joinAWithBButtonActionPerformed

    private Font font = new JLabel("normal").getFont();
    
    /**
     * Non-bold font.
     */
	private Font nonBoldFont = new Font(font.getName(), font.getStyle() & ~Font.BOLD, font.getSize());
	
	/**
     * Subject of query.
     */
    private Table subject;
    
    /**
     * Relationship.
     */
    private class Relationship {
    	public Association association;
    	public JTextField aliasTextField;
    	public Color originalBGColor;
    	public boolean selectColumns;
    }
    
    /**
     * Relationships.
     */
    private List<Relationship> relationships = new ArrayList<Relationship>();
    
    private void resetRelationshipsPanel() {
    	relationshipsPanel.removeAll();
    	Table lastTable = null;
    	for (int y = 0; y <= relationships.size(); ++y) {
    		Relationship relationship = y < relationships.size()? relationships.get(y) : null;
    		
	    	javax.swing.JLabel label;
	
			label = new javax.swing.JLabel();
			label.setText(y == 0? " From  " : " Join  ");
			label.setFont(nonBoldFont);
				
			java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = y;
	        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
	        gridBagConstraints.weightx = 0.0;
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
	        relationshipsPanel.add(label, gridBagConstraints);
	        
			gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = y;
	        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
	        gridBagConstraints.weightx = 0.0;
	        gridBagConstraints.insets = new Insets(0, 0, 2, 0);
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
	        if (relationship == null || relationship.association != null) {
	        	JComboBox tableCB = new JComboBox();
	        	DefaultComboBoxModel aModel = new DefaultComboBoxModel();
	        	aModel.addElement("");
        		for (Association a: lastTable.associations) {
       				aModel.addElement(joinTableRender(lastTable, a));
        		}
	        	tableCB.setModel(aModel);
	        	if (relationship != null) {
	        		tableCB.setSelectedItem(joinTableRender(lastTable, relationship.association));
	        	}
	        	final Table ft = lastTable;
	        	final int index = y;
	        	tableCB.addItemListener(new ItemListener() {
					@Override
					public void itemStateChanged(ItemEvent e) {
						if (e.getStateChange() == ItemEvent.SELECTED) {
							Association sa = null;
							for (Association a: ft.associations) {
								if (joinTableRender(ft, a).equals(e.getItem())) {
									sa = a;
									break;
								}
							}
							if (sa != null) {
								if (relationships.size() <= index) {
									relationships.add(new Relationship());
								}
								boolean cut = false;
								if (relationships.get(index).association == null || relationships.get(index).association.destination != sa.destination) {
									cut = true;
								}
								relationships.get(index).association = sa;
								if (cut) {
									relationships = relationships.subList(0, index + 1);
								}
							} else {
								relationships = relationships.subList(0, index);
							}
							resetRelationshipsPanel();
							updateSQL();
						}
					}
	        	});
		        relationshipsPanel.add(tableCB, gridBagConstraints);
	        } else {
		        label = new javax.swing.JLabel();
	        	label.setText(subject.getName());
		        relationshipsPanel.add(label, gridBagConstraints);
	        }
		    
	        if (relationship == null) {
	        	continue;
	        }
	        
	        label = new javax.swing.JLabel();
			label.setText("   as ");
			label.setFont(nonBoldFont);
			
			gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = y;
	        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
	        gridBagConstraints.weightx = 0.0;
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
	        relationshipsPanel.add(label, gridBagConstraints);
	
	        String alias = "";
	        if (relationship != null && relationship.aliasTextField != null) {
	        	alias = relationship.aliasTextField.getText();
	        }
	        JTextField aliasField = new JTextField(alias);
			relationship.aliasTextField = aliasField;
			relationship.originalBGColor = aliasField.getBackground();
			aliasField.getDocument().addDocumentListener(new DocumentListener() {
				@Override
				public void changedUpdate(DocumentEvent e) {
					checkAliases();
					updateSQL();
				}
				@Override
				public void insertUpdate(DocumentEvent e) {
					checkAliases();
					updateSQL();
				}
				@Override
				public void removeUpdate(DocumentEvent e) {
					checkAliases();
					updateSQL();
				}
			});
			gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = y;
	        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
	        gridBagConstraints.weightx = 0.0;
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
	        relationshipsPanel.add(aliasField, gridBagConstraints);

	        final JCheckBox selectColumnsCB = new JCheckBox("select columns");
			selectColumnsCB.setSelected(relationship.selectColumns);
	        
	        final int index = y;
	        selectColumnsCB.addChangeListener(new ChangeListener() {
				@Override
				public void stateChanged(ChangeEvent e) {
					relationships.get(index).selectColumns = selectColumnsCB.isSelected();
					updateSQL();
				}
	        });
	        
			gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = y;
	        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
	        gridBagConstraints.weightx = 1.0;
	        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
	        gridBagConstraints.insets = new Insets(0, 10, 0, 0);
	        relationshipsPanel.add(selectColumnsCB, gridBagConstraints);
	        lastTable = relationship == null? null : relationship.association == null? subject : relationship.association.destination;
    	}
        
    	JLabel label = new javax.swing.JLabel();
		label.setText("                ");
		
		GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = relationships.size() + 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        relationshipsPanel.add(label, gridBagConstraints);
        
        checkAliases();
        updateSQL();
        validate();
    }
    
    /**
     * Gets render of an association for the join-combobox.
     * 
     * @param association the association
     * @return render of association
     */
    private String joinTableRender(Table from, Association association) {
    	int n = 0;
    	for (Association a: from.associations) {
    		if (a.destination == association.destination) {
    			++n;
    		}
    	}
    	return datamodel.getDisplayName(association.destination) + (n > 1? " on "  + association.getName() : "");
	}
    
    /**
     * Checks aliases, renders naming conflicts.
     */
    private void checkAliases() {
    	for (Relationship a: relationships) {
    		a.aliasTextField.setBackground(a.originalBGColor);
    	}
        for (Relationship a: relationships) {
        	for (Relationship b: relationships) {
        		if (a != b) {
        			String ta = a.aliasTextField.getText().trim();
        			Table tableA = a.association == null? subject : a.association.destination;
        			String tb = b.aliasTextField.getText().trim();
        			Table tableB = b.association == null? subject : b.association.destination;
        			if (ta.length() == 0) {
        				ta = qualifyNamesCB.isSelected()? tableA.getName() : tableA.getUnqualifiedName();
        			}
        			if (tb.length() == 0) {
        				tb = qualifyNamesCB.isSelected()? tableB.getName() : tableB.getUnqualifiedName();
        			}
        			if (ta.equalsIgnoreCase(tb)) {
	        			Color bg = new Color(255, 150, 140);
	        			a.aliasTextField.setBackground(bg);
	        			b.aliasTextField.setBackground(bg);
        			}
        		}
        	}    		
    	}
    }
	
    private boolean sqlIsSingleLine = false;
    private boolean qualifyTableNames = false;
    private String prevSQL = "";
    
    /**
     * Updates the SQL query.
     */
    private void updateSQL() {
    	String currentSql = prevSQL; // createSQL(sqlIsSingleLine, qualifyTableNames);
    	String sql = sqlTextArea.getText();
    	String suffix = "";
    	if (sql.startsWith(currentSql)) {
    		suffix = sql.substring(currentSql.length());
    		if (sqlIsSingleLine) {
    			suffix = suffix.replace('\n', ' ').replace('\r', ' ');
    		}
    	}
    	sqlIsSingleLine = singleLineCB.isSelected();
    	qualifyTableNames = qualifyNamesCB.isSelected();
    	sqlTextArea.setText((prevSQL = createSQL(sqlIsSingleLine, qualifyTableNames)) + suffix);
    }
    
    /**
     * Creates SQL query.
     */
	private String createSQL(boolean singleLine, boolean qualifyTableNames) {
		StringBuffer sql = new StringBuffer("Select ");
		String lf = System.getProperty("line.separator");
		String tab = "       ";
		
		if (!singleLine) {
			int sa = 0;
			for (int i = 0; i < relationships.size(); ++i) {
				Relationship r = relationships.get(i);
				if (r.selectColumns) {
					++sa;
				}
			}
			if (sa > 1) {
				sql.append(lf + tab);
			}
		}
		boolean selectAll = true;
		boolean fr = true;
		for (int i = 0; i < relationships.size(); ++i) {
			Relationship r = relationships.get(i);
			Table t = r.association == null? subject : r.association.destination;
			if (r.selectColumns) {
				selectAll = false;
				if (!fr) {
					sql.append(", ");
					if (!singleLine) {
						sql.append(lf + tab);
					}
				}
				fr = false;
				String alias = r.aliasTextField.getText().trim();
				if (alias.equals("")) {
					if (qualifyTableNames) {
						alias = t.getName();
					} else {
						alias = t.getUnqualifiedName();
					}
				}
				boolean f = true;
				for (Column c: t.getColumns()) {
					if (!f) {
						sql.append(", ");
					}
					f = false;
					sql.append(alias + "." + c.name);
				}
			}
		}
		if (selectAll) {
			sql.append("*");
		}
		if (!singleLine) {
			sql.append(lf);
		} else {
			sql.append(" ");
		}
		sql.append("From ");
		String lastAlias = "";
		for (Relationship r: relationships) {
			Table t = r.association == null? subject : r.association.destination;
			if (r.association != null) {
				sql.append(singleLine? " " : (lf + tab));
				sql.append("join ");
			} else if (relationships.size() > 1) {
				sql.append(singleLine? "" : (lf + tab));
			}
			if (qualifyTableNames) {
				sql.append(t.getName());
			} else {
				sql.append(t.getUnqualifiedName());
			}
			String alias = r.aliasTextField.getText().trim();
			if (alias.length() > 0) {
				sql.append(" " + alias);
			} else {
				alias = qualifyTableNames? t.getName() : t.getUnqualifiedName();
			}
			if (r.association != null) {
				if (!r.association.reversed) {
					sql.append(" on " + SqlUtil.replaceAliases(r.association.getUnrestrictedJoinCondition(), lastAlias, alias));
				} else {
					sql.append(" on " + SqlUtil.replaceAliases(r.association.getUnrestrictedJoinCondition(), alias, lastAlias));
				}
			}
			lastAlias = alias; 
		}
		
		if (!singleLine) {
			sql.append(" " + lf);
		} else {
			sql.append(" ");
		}
		return sql.toString();
	}

	/**
     * The data model.
     */
    private DataModel datamodel;
    
	/**
     * Opens the dialog.
     * 
     * @param table subject of query
     * @param usePath if <code>true</code>, immediately build query based on selected path
     * @param associationsOnPath currently selected associations path
     */
	public void buildQuery(Table table, boolean usePath, List<Association> associationsOnPath, DataModel datamodel) {
		this.associationsOnPath = associationsOnPath;
		if (table == null) {
			return;
		}
		this.datamodel = datamodel;
		subject = table;
		relationships.clear();
		relationships.add(new Relationship());
		if (usePath && !associationsOnPath.isEmpty()) {
			createPathQuery();
		}
		if (associationsOnPath.isEmpty()) {
			joinAWithBButton.setVisible(false);
		}
		resetRelationshipsPanel();
		setVisible(true);
	}
    
	private List<Association> associationsOnPath;
	
    private void createPathQuery() {
    	relationships.clear();
		relationships.add(new Relationship());
		subject = associationsOnPath.get(0).source;
		for (int i = 0; i < associationsOnPath.size(); ++i) {
		   	Association a = associationsOnPath.get(i);
    		Relationship r = new Relationship();
    		r.association = a;
    		relationships.add(r);
    	}
		resetRelationshipsPanel();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clipboardButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton joinAWithBButton;
    private javax.swing.JCheckBox qualifyNamesCB;
    private javax.swing.JPanel relationshipsPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox singleLineCB;
    private javax.swing.JTextArea sqlTextArea;
    // End of variables declaration//GEN-END:variables
    
}
