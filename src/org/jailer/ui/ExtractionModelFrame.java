/*
 * Copyright 2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jailer.ui;

import java.awt.CardLayout;
import java.awt.event.InputEvent;
import java.io.File;

import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;

import org.jailer.Jailer;

/**
 * Main frame of Restriction-Model-Editor.
 * 
 * @author Wisser
 */
public class ExtractionModelFrame extends javax.swing.JFrame {

	/**
	 * The embedded editor.
	 */
	private ExtractionModelEditor extractionModelEditor;
	
    /**
     *  Creates new form ExtractionModelFrame.
     *  
     *  @param extractionModelFile file containing the model, <code>null</code> for new model
     */
    public ExtractionModelFrame(String extractionModelFile) {
        initComponents();
        editorPanel.add(extractionModelEditor = new ExtractionModelEditor(extractionModelFile, this), "editor");
        extractionModelEditor.extractionModelFile = extractionModelFile;
    	fileMenu.setMnemonic('f');
        newModel.setMnemonic('n');
        load.setMnemonic('o');
        save.setMnemonic('s');
        saveAs.setMnemonic('a');
        newModel.setAccelerator(KeyStroke.getKeyStroke('N', InputEvent.CTRL_MASK));
        load.setAccelerator(KeyStroke.getKeyStroke('O', InputEvent.CTRL_MASK));
        save.setAccelerator(KeyStroke.getKeyStroke('S', InputEvent.CTRL_MASK));
        saveAs.setAccelerator(KeyStroke.getKeyStroke('A', InputEvent.CTRL_MASK));
        jMenu1.setMnemonic('a');
        collapseAll.setMnemonic('l');
        expandAll.setMnemonic('p');
        refresh.setMnemonic('r');
        hideIgnored.setMnemonic('h');
        expandAll.setAccelerator(KeyStroke.getKeyStroke('P', InputEvent.CTRL_MASK));
        refresh.setAccelerator(KeyStroke.getKeyStroke('R', InputEvent.CTRL_MASK));
        hideIgnored.setAccelerator(KeyStroke.getKeyStroke('H', InputEvent.CTRL_MASK));
        pack();
        updateTitle(extractionModelEditor.needsSave);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        editorPanel = new javax.swing.JPanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newModel = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        load = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        collapseAll = new javax.swing.JMenuItem();
        expandAll = new javax.swing.JMenuItem();
        refresh = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        hideIgnored = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Extraction Model Editor");
        setDefaultCloseOperation(0);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        editorPanel.setLayout(new java.awt.CardLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(editorPanel, gridBagConstraints);

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        newModel.setText("New Model");
        newModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newModelActionPerformed(evt);
            }
        });

        fileMenu.add(newModel);

        fileMenu.add(jSeparator3);

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        fileMenu.add(load);

        fileMenu.add(jSeparator1);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        fileMenu.add(save);

        saveAs.setText("Save as...");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });

        fileMenu.add(saveAs);

        fileMenu.add(jSeparator2);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        fileMenu.add(exit);

        jMenuBar2.add(fileMenu);

        jMenu1.setText("Association");
        collapseAll.setText("Collapse all");
        collapseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseAllActionPerformed(evt);
            }
        });

        jMenu1.add(collapseAll);

        expandAll.setLabel("Expand all");
        expandAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandAllActionPerformed(evt);
            }
        });

        jMenu1.add(expandAll);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jMenu1.add(refresh);

        jMenu1.add(jSeparator4);

        hideIgnored.setText("Hide ignored");
        hideIgnored.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideIgnoredActionPerformed(evt);
            }
        });

        jMenu1.add(hideIgnored);

        jMenuBar2.add(jMenu1);

        jMenu2.setText("Help");
        jMenuItem1.setText("About Jailer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItem1);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    	JOptionPane.showMessageDialog(this, "Jailer " + Jailer.VERSION + "\nhttp://jailer.sourceforge.net", "About Jailer", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
    	if (saveIfNeeded("loading")) {
    		String modelFile = UIUtil.choseFile(null, ".", "Load Extraction Model", ".csv", this, true, true);
    		if (modelFile != null) {
	    		extractionModelEditor.extractionModelFrame = null;
	    		editorPanel.remove(extractionModelEditor);
	    		editorPanel.add(extractionModelEditor = new ExtractionModelEditor(modelFile, this), "editor");
	    		((CardLayout) editorPanel.getLayout()).show(editorPanel, "editor");
	    		validate();
	    		updateTitle(extractionModelEditor.needsSave);
    		}
    	}
    }//GEN-LAST:event_loadActionPerformed

    private void newModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newModelActionPerformed
    	if (saveIfNeeded("creating new model")) {
    		extractionModelEditor.extractionModelFrame = null;
    		editorPanel.remove(extractionModelEditor);
    		editorPanel.add(extractionModelEditor = new ExtractionModelEditor(null, this), "editor");
    		((CardLayout) editorPanel.getLayout()).show(editorPanel, "editor");
    		validate();
    		updateTitle(extractionModelEditor.needsSave);
    	}
    }//GEN-LAST:event_newModelActionPerformed

	private void expandAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandAllActionPerformed
    	extractionModelEditor.expand();
    }//GEN-LAST:event_expandAllActionPerformed

    private void hideIgnoredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideIgnoredActionPerformed
        extractionModelEditor.refresh();
    }//GEN-LAST:event_hideIgnoredActionPerformed

    private void collapseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseAllActionPerformed
        extractionModelEditor.refresh();
    }//GEN-LAST:event_collapseAllActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
    	extractionModelEditor.refresh();
    }//GEN-LAST:event_refreshActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        extractionModelEditor.save(true);
    }//GEN-LAST:event_saveAsActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        extractionModelEditor.save(false);
    }//GEN-LAST:event_saveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        onExit();
    }//GEN-LAST:event_formWindowClosing

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
    	onExit();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Saves model if needed.
     * 
     * @return <code>false</code> if user cancels saving
     */
    private boolean saveIfNeeded(String cause) {
    	if (!extractionModelEditor.needsSave) {
    		return true;
    	}
    	int option = JOptionPane.showConfirmDialog(this, "Save changes before " + cause + "?", "", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
    	if (option == JOptionPane.CANCEL_OPTION) {
    		return false;
    	}
    	if (option == JOptionPane.NO_OPTION) {
    		return true;
    	}
    	return extractionModelEditor.save(false);
	}

    /**
     * Exits GUI.
     */
    private void onExit() {
    	if (extractionModelEditor.needsSave) {
	    	if (0 == JOptionPane.showConfirmDialog(
	    			this,  
	    			"Exit without saving?",
	                "",
	                JOptionPane.YES_NO_OPTION,
	                JOptionPane.QUESTION_MESSAGE)) {
	    		System.exit(0);
	    	}
	    } else {
	    	System.exit(0);
	    }
    }

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
    }//GEN-LAST:event_fileMenuActionPerformed
    
    /**
     * Updates title.
     */
	public void updateTitle(boolean needsSave) {
		if (extractionModelEditor == null) {
			return;
		}
		String title = "Jailer " + Jailer.VERSION + " Extraction Model Editor";
        if (extractionModelEditor.extractionModelFile == null) {
        	title = "New Model - " + title;
        } else {
        	title = new File(extractionModelEditor.extractionModelFile).getName() + " - " + title;
        }
        if (needsSave) {
        	title = "*" + title;
        }
        setTitle(title);
	}

	boolean hideIgnored() {
		return hideIgnored.isSelected();
	}
	
	/**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExtractionModelFrame extractionModelFrame = new ExtractionModelFrame(args.length > 0? args[0] : null);
                extractionModelFrame.setLocation(40, 40);
                extractionModelFrame.setSize(960, 660);
                extractionModelFrame.setVisible(true);
            }
        });
    }
    
    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private javax.swing.JMenuItem collapseAll;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem expandAll;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBoxMenuItem hideIgnored;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenuItem load;
    private javax.swing.JMenuItem newModel;
    private javax.swing.JMenuItem refresh;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    // Ende der Variablendeklaration//GEN-END:variables
    
}
