/*
 * ModelTree.java
 *
 * Created on 12. November 2007, 15:02
 */

package org.jailer.ui;

import java.awt.Component;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.ListModel;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import org.jailer.datamodel.Association;
import org.jailer.datamodel.DataModel;
import org.jailer.datamodel.ModelElement;
import org.jailer.datamodel.Table;

/**
 * 
 * @author wisser
 */
public class ModelTree extends javax.swing.JPanel {

	/** Creates new form ModelTree */
	public ModelTree() {
		try {
			dataModel = new DataModel(null, null);
			subject = dataModel.getTable("LINE");
		} catch (Exception e) {
			throw new RuntimeException(e);
		}

		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane2 = new javax.swing.JScrollPane();
        subjectList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        subjectList.setModel(getTablesList());
        subjectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                subjectListValueChanged(evt);
            }
        });

        jScrollPane2.setViewportView(subjectList);

        add(jScrollPane2);

        tree.setCellRenderer(getTreeCellRenderer());
        tree.setModel(getModel());
        jScrollPane1.setViewportView(tree);

        add(jScrollPane1);

    }// </editor-fold>//GEN-END:initComponents

    private void subjectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_subjectListValueChanged
        System.out.println("subject changed");
    }//GEN-LAST:event_subjectListValueChanged

	private DataModel dataModel;
	private Table subject;

	private TreeModel getModel() {
		try {
			dataModel = new DataModel(null, null);
			subject = dataModel.getTable("LINE");
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
    	
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(subject);
		Map<ModelElement, DefaultMutableTreeNode> toNode = new HashMap<ModelElement, DefaultMutableTreeNode>();
		Map<Association, DefaultMutableTreeNode> parent = new HashMap<Association, DefaultMutableTreeNode>();
		List<Association> agenda = new LinkedList<Association>();
		
		toNode.put(subject, root);
		for (Association a: subject.associations) {
			agenda.add(a);
			parent.put(a, root);
		}
		while (!agenda.isEmpty()) {
			Association a = agenda.get(0);
			agenda.remove(0);
			if (toNode.get(a) == null) {
				DefaultMutableTreeNode node = new DefaultMutableTreeNode(a);
				parent.get(a).add(node);
				toNode.put(a, node);
				for (Association nextA: a.destination.associations) {
					if (!parent.containsKey(nextA)) {
						agenda.add(nextA);
						parent.put(nextA, node);
					}
				}
			}
		}
		
		DefaultTreeModel treeModel = new DefaultTreeModel(root);
		return treeModel;
	}

	private TreeCellRenderer getTreeCellRenderer() {
		return new DefaultTreeCellRenderer() {
			public Component getTreeCellRendererComponent(JTree tree,
					Object value, boolean selected, boolean expanded,
					boolean leaf, int row, boolean hasFocus) {
				DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
				String text = "";
				if (node.getUserObject() instanceof Table) {
					text = ((Table) node.getUserObject()).getName();
				} else if (node.getUserObject() instanceof Association) {
					text = ((Association) node.getUserObject()).destination.getName();
				}
				return super.getTreeCellRendererComponent(tree, text, selected, expanded, leaf, row, hasFocus);
			}
		};
	}

	private ListModel getTablesList() {
    	DefaultListModel defaultListModel = new DefaultListModel();
    	for (Table table: dataModel.getTables()) {
    		defaultListModel.addElement(table.getName());
    	}
    	return defaultListModel;
    }
        
    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList subjectList;
    private javax.swing.JTree tree;
    // Ende der Variablendeklaration//GEN-END:variables

}
